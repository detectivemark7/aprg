Editors

-> vim
---> vim vs emacs (very heated topic)
---> More info on: https://en.wikipedia.org/wiki/Editor_war
---> Powerful text editor

-> Learning materials
---> vimtutor
-----> probably already installed in your pc if it has vim
-----> http://www2.geog.ucl.ac.uk/~plewis/teaching/unix/vimtutor
-----> The approximate time required to complete the tutor is 25-30 minutes, depending upon how much time is spent with experimentation.
---> vimadventures
-----> https://vim-adventures.com

-> nano
---> simple to use
---> its great to use when you dont to use anything else
---> its great when you dont have anything else to use and just have to create a small change
---> its not great to use when you want to create complicated programs (no great support to change anything densy)

-> vim is a modal editor
---> We typically dont write essays when we code. We just peruse the code and change some line and peruse again and change line again. 
---> So in Vim, there is a concept of modes. The entire tool can be in different modes designed to create this kind of things.
---> There is a mode of inserting text, but there is a mode of viewing the file, and manipulating the file in different ways.
---> "Normal mode" is just viewing the file and manipulating the file in different ways.

-> vim is programmable
---> vim can be programmed using vimscript
-----> you can customize a lot of aspects of this tool by writing in vimscript
-----> you change the configuration and write programs and plugins
---> the interface is also like a programming language
-----> the way you move the cursor around and make changes to a file also is through a sequence of commands (usually thru key strokes)
-----> the commands are composable
-------> you can combine "movement commands" and "editing commands" to create a "compound command"
-------> Example: you can combine the command "to go forward by a word" with the command "to change something" means you can "replace the word"

-> We dont want to use the mouse to navigate
---> its imprecise and very slow
---> we just use the keyboard
---> the editor should work on the speed you think

-> Modes:
---> shown the at the bottom-left of vim
---> if nothing is shown then you are in normal mode
---> Keystrokes:
-----> 'esc' takes you back to "normal mode"
-----> 'i' takes you to "insert mode"
-------> you can type in text to insert
-----> 'R' takes you to replace mode (overwrite mode)
-------> you can type in text to overwrite
-----> 'v' takes you to "visual mode" (selection)
-------> you can select a bunch of text
-----> 'V' takes you to "visual line mode" (selection)
-------> you can select a block of text by lines
-----> 'ctrl+v' takes you to "visual block mode"
-------> you can select a block of text
-----> ':' takes you to "command mode"
-------> you can issue commands

-> Notation with CTRL
---> CTRL+V can be
-----> ^V
-----> Ctrl+V
-----> <C-V> (vim version)

-> X-commands (in normal mode)
---> if youre in normal mode, you press colon (you can see that cursor jump down to the bottom-left)
---> Basic X-commands:
-----> ':q' means quit
-----> ':w' means write (means save the file)
-------> ':w [FILENAME]' save a new file
-------> ':#,# w [FILENAME]' save the chunk of text between two lines (#,#)
-----> ':wq' means write then quit
-------> ':x' means write then quit as well (save so much time by avoid one character lol)
-----> ':e' means edit
-------> if you give it a name, you can edit that file (vim can have many buffers open)
-----> ':new' means new file
-----> ':ls' means list the buffers open
-------> it will show you the files you have open
-----> ':bn' means go to the next buffer
-----> ':h' means help 
-------> ":help write" shows the help contents of the write command
-------> ":help w" shows the help contents of the "w" keystoke (move words forward)
-------> ":help c_<T"
-------> ":help insert-index"
-------> ":help user-manual"
-----> Executing external commands
-------> Type :! followed by an external command to execute that command.
-----> Setting options
-------> :set ic (will set ignore case on search)
-----> Split windows
-------> ':sp' means split to multiple windows of the same file
---------> what if you want to see the top line of text and bottom line of text at the same time

-> Moving around the file (in normal mode)
---> You can disable the arrow keys when using vim to avoid bad habits.
-----> vim ~/.vimrc
-------> ".vimrc" is the configuration file
-------> put these lines on the file:
----------> nnoremap <Left> :echoe "Use h" <CR>
----------> nnoremap <Right> :echoe "Use l" <CR>
----------> nnoremap <Up> :echoe "Use k" <CR>
----------> nnoremap <Down> :echoe "Use j" <CR>

---> Vim’s interface is a programming language
-----> The most important idea in Vim is that Vim’s interface itself is a programming language. 
-------> Keystrokes (with mnemonic names) are commands, and these commands compose. 
-------> This enables efficient movement and edits, especially once the commands become muscle memory.

---> Format of a command in normal mode is:
-----> [number] command object or command number [object]

---> Movement
-----> You should spend most of your time in Normal mode, using movement commands to navigate the buffer. 
-----> Movements in Vim are also called “nouns”, because they refer to chunks of text.
-------> Basic movement: 'h', 'j', 'k', 'l' (left, down, up, right)
-------> Words: 'w' (next word), b (beginning of word), 'e' (end of word)
-------> Lines: '0' (beginning of line), '^' (first non-blank character), '$' (end of line)
-------> Screen: 'H' (top of screen), 'M' (middle of screen), 'L' (bottom of screen)
-------> Scroll: Ctrl+'u' (up), Ctrl+'d' (down)
-------> File: 'gg' (beginning of file), 'G' (end of file)
-------> Line numbers: :{number}<CR> or {number}G (line {number})
-------> Misc: '%' (corresponding item)
---------> Typeing % while the cursor is within a parentheses, braces and brackets locates its matching pair
---------> Useful for handling parenthesis, braces and brackets
-------> Find: 'f{character}', 't{character}', 'F{character}', 'T{character}'
---------> find/to forward/backward {character} on the current line
---------> ',' and ';' for navigating matches
-------> Search (in normal mode):
---------> Type in '/' and the cursor moves at the bottom-left of the screen and you can regex search to the next occurence of the regex hit
---------> Forward Search: '/{regex}'
---------> Backward Search: '?{regex}'
---------> 'n' and 'N' for navigating matches (this is after performing the regex search)
-------> See Substitute section for search and replace
-----> Common uses:
-------> 'w' move forward by words (beginning of word)
-------> 'b' move backward by words (beginning of word)
-------> 'e' move forward by words (end of the word)
-------> '0' moves at the start of the line
-------> '$' moves at the end of the line
-------> '^' moves at the start of the nonwhitespace character of the line
-------> 'H' goes to the top of the screen 
-------> 'M' goes to the middle of the screen 
-------> 'L' goes to the bottom of the screen  
-------> 'ctrl+d' goes down by a page 
-------> 'ctrl+u' goes up by a page 
-------> 'gg' moves at the beginning of the file
-------> 'G' moves at the end of the file
-------> ':[linenumber]' can get you to the exact line number of the file
-------> '%' move to the corresponding item (for example in a parenthesis block, it will go the start of the parenthesis)
-------> 'f' and then 'character' means find (search forward) the first occurrence of that character
-------> 'F' and then 'character' means find (search backward) the first occurrence of that character
-------> 't' and then 'character' means jump to (search forward) the first occurrence of that character (one character before the searched character)
-------> 'T' and then 'character' means jump to (search backward) the first occurrence of that character (one character before the searched character)
-----> Composability of movement:
-------> '5' then 'j' means go down 5 times
-------> '3' then 'w' means move forward by 3 words

---> Selection
-----> Visual modes:
-------> Visual: 'v'
-------> Visual Line: 'V'
-------> Visual Block: Ctrl+'v'
-----> Can use movement keys to make selection.

---> Edits
-----> Everything that you used to do with the mouse, you now do with the keyboard using editing commands that compose with movement commands. 
-----> Here’s where Vim’s interface starts to look like a programming language. 
-----> Vim’s editing commands are also called “verbs”, because verbs act on nouns.
-----> NOTE: this also can be done in the visual modes
-----> Insert text (goes into insert mode)
-------> 'i' enter Insert mode
---------> but for manipulating/deleting text, want to use something more than backspace
-------> 'o' insert line below, 'O' insert line above
-------> 'a' append text after the cursor, 'A' append text at the end of the line
-----> Overwrite text (goes into replace mode (overwrite mode))
-------> 'R' enter overwrite mode
-----> Deleting text (goes into insert mode)
-------> 'd{motion}' delete {motion}
---------> e.g. dw is delete word, 'd$' is delete to end of line, 'd0' is delete to beginning of line
-------> 'x' delete character (equal do 'dl')
-------> Can be composed with movement keystrokes:
---------> 'd' then 'e' means delete to the end of the word
---------> 'd' then '$' means delete to the end of the line
---------> 'd' then '0' means delete to the start of the line
---------> 'd' then '^' means delete until the non white space character at the start of the line
---------> 'd' then '3' then 'j' means delete three lines down
---------> 'd' then '3' then 'w' means delete the next three words
---------> 'd' then 'l' means delete one thing to the right
---------> 'x' means delete the character on the cursor
-------> NOTE: this also can be done in the visual modes
-----> Changing text (goes into insert mode)
-------> 'c{motion}' change {motion}
---------> e.g. 'cw' is change word
---------> like 'd{motion}' followed by i
-------> Can be composed with movement keystrokes:
---------> 'c' then '3' then 'w' means delete the next three words and then go to insert mode
-----> Substitute:
-------> 's' means delete the character on the cursor and go to insert mode
-------> 's' substitute character (equal to 'xi')
-------> Substitute or (search and replace)
----------> ':s' lets you substitute like sed 
------------> ':s/foo/bar' this means regex search for "foo" replace with "bar" on the first hit in a line
------------> ':s/foo/bar/g' this means regex search for "foo" replace with "bar" on all hits in a line
------------> ':s#,#/foo/bar/g' this means regex search for "foo" replace with "bar" where #,# are the numbers of the two lines.
------------> ':s%/foo/bar/g' this means regex search for "foo" replace with "bar" in the whole file
------------> ':s%/foo/bar/gc' this means regex search for "foo" replace with "bar" in the whole file with confirmation('c') each time
--------------> http://vim.wikia.com/wiki/Search_and_replace
--------------> "\1" means the replace with the captured text in the parenthesis (similar to sed)
-----> Visual mode + manipulation
-------> select text, 'd' to delete it or 'c' to change it
-----> Undo and Redo
-------> 'u' to undo
-------> 'U' to undo all in the line
-------> CTRL+R to redo
-----> Copy and Paste (puts you into normal mode)
-------> 'y' to copy or "yank" (some other commands with d also copy)
----------> 'yy' copies the whole line
----------> 'yw' copies the word
--------> 'p' to paste or put (you can pasted deleted items using d)
-----> Repeat
-------> '.' repeats the last edit
-----> Flip the case:
-------> '~' means flip the case the character on the cursor and move to the right
----------> '3' then '~' changes 3 characters

---> Counts
-----> You can combine nouns and verbs with a count, which will perform a given action a number of times.
-------> '3w' move 3 words forward
-------> '5j' move 5 lines down
-------> '7dw' delete 7 words

---> Modifiers
-----> You can use modifiers to change the meaning of a noun. 
-----> Some modifiers are i, which means “inner” or “inside”, and a, which means “around”.
-------> 'ci'( change the contents inside the current pair of parentheses
-------> 'ci'[ change the contents inside the current pair of square brackets
-------> 'da' delete a single-quoted string, including the surrounding single quotes

-> Macros
---> 'q' then 'any letter' and it will record a macro under that letter
---> '@' then 'any letter' replays the macro
---> Example: You can change an xml file into a json file.

-> ".vimrc"
---> can configure tons of things (syntax highlighting, backspace usage etc)
---> look for inspiration from other people in github





-> Editors (2019 lecture)

---> Importance of Editors

-----> As programmers, we spend most of our time editing plain-text files. 
-------> It’s worth investing time learning an editor that fits your needs.
-----> How do you learn a new editor? 
-------> You force yourself to use that editor for a while, even if it temporarily hampers your productivity. 
-------> It’ll pay off soon enough (two weeks is enough to learn the basics).
-----> We are going to teach you Vim, but we encourage you to experiment with other editors. 
-------> It’s a very personal choice, and people have strong opinions.
-----> We can’t teach you how to use a powerful editor in 50 minutes, so we’re going to focus on teaching you the basics, 
-------> showing you some of the more advanced functionality, and giving you the resources to master the tool. 
-------> We’ll teach you lessons in the context of Vim, but most ideas will translate to any other powerful editor you use (and if they don’t, then you probably shouldn’t use that editor!).

---> Editor Learning Curves

-----> The editor learning curves graph is a myth. 
-------> Learning the basics of a powerful editor is quite easy (even though it might take years to master).
-----> Which editors are popular today? 
-------> See this Stack Overflow survey (there may be some bias because Stack Overflow users may not be representative of programmers as a whole).

---> Command-line Editors

-----> Even if you eventually settle on using a GUI editor, it’s worth learning a command-line editor for easily editing files on remote machines.

-----> Nano
-------> Nano is a simple command-line editor.
---------> Move with arrow keys
---------> All other shortcuts (save, exit) shown at the bottom

-----> Vim
-------> Vi/Vim is a powerful text editor. 
---------> It’s a command-line program that’s usually installed everywhere, which makes it convenient for editing files on a remote machine.
-------> Vim also has graphical versions, such as GVim and MacVim. 
---------> These provide additional features such as 24-bit color, menus, and popups.
-------> Philosophy of Vim
---------> When programming, you spend most of your time reading/editing, not writing
-----------> Vim is a modal editor: different modes for inserting text vs manipulating text
---------> Vim is programmable (with Vimscript and also other languages like Python)
---------> Vim’s interface itself is like a programming language
-----------> Keystrokes (with mnemonic names) are commands
-----------> Commands are composable
---------> Don’t use the mouse: too slow
---------> Editor should work at the speed you think

---> Introductory Vim

-----> Modes
-------> Vim shows the current mode in the bottom left.
---------> Normal mode: for moving around a file and making edits
-----------> Spend most of your time here
---------> Insert mode: for inserting text
---------> Visual (visual, line, or block) mode: for selecting blocks of text
-------> You change modes by pressing <ESC> to switch from any mode back to normal mode. 
-------> From normal mode, enter insert mode with i, visual mode with v, visual line mode with V, and visual block mode with <C-v>.
-------> You use the <ESC> key a lot when using Vim: consider remapping Caps Lock to Escape.

-----> Basics
-------> Vim ex commands are issued through :{command} in normal mode.
---------> :q quit (close window)
---------> :w save
---------> :wq save and quit
---------> :e {name of file} open file for editing
---------> :ls show open buffers
---------> :help {topic} open help
-----------> :help :w opens help for the :w ex command
-----------> :help w opens help for the w movement

-----> Movement
-------> Vim is all about efficient movement. Navigate the file in Normal mode.
---------> Disable arrow keys to avoid bad habits
-----------> nnoremap <Left> :echoe "Use h"<CR>
-----------> nnoremap <Right> :echoe "Use l"<CR>
-----------> nnoremap <Up> :echoe "Use k"<CR>
-----------> nnoremap <Down> :echoe "Use j"<CR>
---------> Basic movement: hjkl (left, down, up, right)
---------> Words: w (next word), b (beginning of word), e (end of word)
---------> Lines: 0 (beginning of line), ^ (first non-blank character), $ (end of line)
---------> Screen: H (top of screen), M (middle of screen), L (bottom of screen)
---------> File: gg (beginning of file), G (end of file)
---------> Line numbers: :{number}<CR> or {number}G (line {number})
---------> Misc: % (corresponding item)
---------> Find: f{character}, t{character}, F{character}, T{character}
-----------> find/to forward/backward {character} on the current line
---------> Repeating N times: {number}{movement}, e.g. 10j moves down 10 lines
---------> Search: /{regex}, n / N for navigating matches

-----> Selection
-------> Visual modes:
---------> Visual
---------> Visual Line
---------> Visual Block
-------> Can use movement keys to make selection.

-----> Manipulating text
-------> Everything that you used to do with the mouse, you now do with keyboards (and powerful, composable commands).
---------> i enter insert mode
-----------> but for manipulating/deleting text, want to use something more than backspace
---------> o / O insert line below / above
---------> d{motion} delete {motion}
--------->     e.g. dw is delete word, d$ is delete to end of line, d0 is delete to beginning of line
---------> c{motion} change {motion}
-----------> e.g. cw is change word
-----------> like d{motion} followed by i
---------> x delete character (equal do dl)
---------> s substitute character (equal to xi)
---------> visual mode + manipulation
--------->     select text, d to delete it or c to change it
---------> u to undo, <C-r to redo
---------> Lots more to learn: e.g. ~ flips the case of a character

-----> Resources
-------> vimtutor command-line program to teach you vim
-------> Vim Adventures game to learn Vim

---> Customizing Vim
-----> Vim is customized through a plain-text configuration file in ~/.vimrc (containing Vimscript commands). 
-------> There are probably lots of basic settings that you want to turn on.
-----> Look at people’s dotfiles on GitHub for inspiration, but try not to copy-and-paste people’s full configuration. 
-------> Read it, understand it, and take what you need.
-----> Some customizations to consider:
-------> Syntax highlighting: syntax on
-------> Color schemes
-------> Line numbers: set nu / set rnu
-------> Backspacing through everything: set backspace=indent,eol,start

---> Advanced Vim
-----> Here are a few examples to show you the power of the editor. We can’t teach you all of these kinds of things, but you’ll learn them as you go. 
-----> A good heuristic: whenever you’re using your editor and you think “there must be a better way of doing this”, there probably is: look it up online.

-----> Search and replace
-------> :s (substitute) command (documentation).
---------> %s/foo/bar/g
-----------> replace foo with bar globally in file
---------> %s/\[.*\](\(.*\))/\1/g
-----------> replace named Markdown links with plain URLs

-----> Multiple windows
-------> sp / vsp to split windows
-------> Can have multiple views of the same buffer.

-----> Mouse support
-------> set mouse+=a
---------> can click, scroll select

-----> Macros
-------> q{character} to start recording a macro in register {character}
-------> q to stop recording
-------> @{character} replays the macro
-------> Macro execution stops on error
-------> {number}@{character} executes a macro {number} times
-------> Macros can be recursive
---------> first clear the macro with q{character}q
---------> record the macro, with @{character} to invoke the macro recursively (will be a no-op until recording is complete)
-------> Example: convert xml to json (file)
---------> Array of objects with keys “name” / “email”
---------> Use a Python program?
---------> Use sed / regexes
-----------> g/people/d
-----------> %s/<person>/{/g
-----------> %s/<name>\(.*\)<\/name>/"name": "\1",/g
-----------> …
---------> Vim commands / macros
-----------> Gdd, ggdd delete first and last lines
-----------> Macro to format a single element (register e)
-------------> Go to line with <name>
-------------> qe^r"f>s": "<ESC>f<C"<ESC>q
-----------> Macro to format a person
-------------> Go to line with <person>
-------------> qpS{<ESC>j@eA,<ESC>j@ejS},<ESC>q
-----------> Macro to format a person and go to the next person
-------------> Go to line with <person>
-------------> qq@pjq
-----------> Execute macro until end of file
-------------> 999@q
-----------> Manually remove last , and add [ and ] delimiters

---> Extending Vim

-----> There are tons of plugins for extending vim.
-----> First, get set up with a plugin manager like vim-plug, Vundle, or pathogen.vim.
-----> Some plugins to consider:
-------> ctrlp.vim: fuzzy file finder
-------> vim-fugitive: git integration
-------> vim-surround: manipulating “surroundings”
-------> gundo.vim: navigate undo tree
-------> nerdtree: file explorer
-------> syntastic: syntax checking
-------> vim-easymotion: magic motions
-------> vim-over: substitute preview

-----> Lists of plugins:
-------> Vim Awesome

---> Vim-mode in Other Programs
-----> For many popular editors (e.g. vim and emacs), many other tools support editor emulation.
-------> Shell
---------> bash: set -o vi
---------> zsh: bindkey -v
---------> export EDITOR=vim (environment variable used by programs like git)
-------> ~/.inputrc
---------> set editing-mode vi
-----> There are even vim keybinding extensions for web browsers, some popular ones are Vimium for Google Chrome and Tridactyl for Firefox.

-----> Resources
-------> Vim Tips Wiki
-------> Vim Advent Calendar: various Vim tips
-------> Neovim is a modern vim reimplementation with more active development.
-------> Vim Golf: Various Vim challenges




-> Editors (Vim) (2020 lecture)

---> Writing English words and writing code are very different activities. 
-----> When programming, you spend more time switching files, reading, navigating, and editing code compared to writing a long stream. 
-----> It makes sense that there are different types of programs for writing English words versus code (e.g. Microsoft Word versus Visual Studio Code).

---> As programmers, we spend most of our time editing code, so it’s worth investing time mastering an editor that fits your needs. 
-----> Here’s how you learn a new editor:
-------> Start with a tutorial (i.e. this lecture, plus resources that we point out)
-------> Stick with using the editor for all your text editing needs (even if it slows you down initially)
-------> Look things up as you go: if it seems like there should be a better way to do something, there probably is

---> If you follow the above method, fully committing to using the new program for all text editing purposes, the timeline for learning a sophisticated text editor looks like this. 
-----> In an hour or two, you’ll learn basic editor functions such as opening and editing files, save/quit, and navigating buffers. 
-----> Once you’re 20 hours in, you should be as fast as you were with your old editor. 
-----> After that, the benefits start: you will have enough knowledge and muscle memory that using the new editor saves you time. 
-----> Modern text editors are fancy and powerful tools, so the learning never stops: you’ll get even faster as you learn more.
-----> Which editor to learn?

---> Programmers have strong opinions about their text editors.

-----> Which editors are popular today? 
-------> See this Stack Overflow survey (there may be some bias because Stack Overflow users may not be representative of programmers as a whole). 
-------> Visual Studio Code is the most popular editor. Vim is the most popular command-line-based editor.

---> Vim

-----> All the instructors of this class use Vim as their editor. 
-------> Vim has a rich history; it originated from the Vi editor (1976), and it’s still being developed today. 
-------> Vim has some really neat ideas behind it, and for this reason, lots of tools support a Vim emulation mode (for example, 1.4 million people have installed Vim emulation for VS code). 
-------> Vim is probably worth learning even if you finally end up switching to some other text editor.

-----> It’s not possible to teach all of Vim’s functionality in 50 minutes, 
-------> so we’re going to focus on explaining the philosophy of Vim, teaching you the basics, 
-------> showing you some of the more advanced functionality, and giving you the resources to master the tool.

---> Philosophy of Vim

-----> When programming, you spend most of your time reading/editing, not writing. 
-------> For this reason, Vim is a modal editor: it has different modes for inserting text vs manipulating text. 
-------> Vim is programmable (with Vimscript and also other languages like Python), 
-------> and Vim’s interface itself is a programming language: keystrokes (with mnemonic names) are commands, and these commands are composable. 
-------> Vim avoids the use of the mouse, because it’s too slow; 
-------> Vim even avoids using the arrow keys because it requires too much movement.
-----> The end result is an editor that can match the speed at which you think.

---> Modal editing

-----> Vim’s design is based on the idea that a lot of programmer time is spent reading, navigating, 
-------> and making small edits, as opposed to writing long streams of text. 
-------> For this reason, Vim has multiple operating modes.
---------> Normal: for moving around a file and making edits
---------> Insert: for inserting text
---------> Replace: for replacing text
---------> Visual (plain, line, or block): for selecting blocks of text
---------> Command-line: for running a command

-----> Keystrokes have different meanings in different operating modes. 
-------> For example, the letter x in Insert mode will just insert a literal character ‘x’, 
-------> but in Normal mode, it will delete the character under the cursor, and in Visual mode, it will delete the selection.

-----> In its default configuration, Vim shows the current mode in the bottom left. 
-------> The initial/default mode is Normal mode. 
-------> You’ll generally spend most of your time between Normal mode and Insert mode.

-----> You change modes by pressing <ESC> (the escape key) to switch from any mode back to Normal mode. 
-------> From Normal mode, enter 
-------> Insert mode with i, 
-------> Replace mode with R, 
-------> Visual mode with v, 
-------> Visual Line mode with V, 
-------> Visual Block mode with <C-v> 
-------> (Ctrl+V, sometimes also written ^V), 
-------> and Command-line mode with :.
-----> You use the <ESC> key a lot when using Vim: consider remapping Caps Lock to Escape (macOS instructions).

---> Basics

-----> Inserting text
-------> From Normal mode, press i to enter Insert mode. 
-------> Now, Vim behaves like any other text editor, until you press <ESC> to return to Normal mode. 
-------> This, along with the basics explained above, 
-------> are all you need to start editing files using Vim (though not particularly efficiently, if you’re spending all your time editing from Insert mode).

-----> Buffers, tabs, and windows
-------> Vim maintains a set of open files, called “buffers”. 
-------> A Vim session has a number of tabs, each of which has a number of windows (split panes). 
-------> Each window shows a single buffer. 
-------> Unlike other programs you are familiar with, like web browsers, there is not a 1-to-1 correspondence between buffers and windows; windows are merely views. 
-------> A given buffer may be open in multiple windows, even within the same tab. 
-------> This can be quite handy, for example, to view two different parts of a file at the same time.
-------> By default, Vim opens with a single tab, which contains a single window.

-----> Command-line
-------> Command mode can be entered by typing : in Normal mode. 
-------> Your cursor will jump to the command line at the bottom of the screen upon pressing :. 
-------> This mode has many functionalities, including opening, saving, and closing files, and quitting Vim.
---------> :q quit (close window)
---------> :w save (“write”)
---------> :wq save and quit
---------> :e {name of file} open file for editing
---------> :ls show open buffers
---------> :help {topic} open help
-----------> :help :w opens help for the :w command
-----------> :help w opens help for the w movement

---> Vim’s interface is a programming language

---> The most important idea in Vim is that Vim’s interface itself is a programming language. 
-----> Keystrokes (with mnemonic names) are commands, and these commands compose. 
-----> This enables efficient movement and edits, especially once the commands become muscle memory.

---> Movement
-----> You should spend most of your time in Normal mode, using movement commands to navigate the buffer. 
-----> Movements in Vim are also called “nouns”, because they refer to chunks of text.
-------> Basic movement: hjkl (left, down, up, right)
-------> Words: w (next word), b (beginning of word), e (end of word)
-------> Lines: 0 (beginning of line), ^ (first non-blank character), $ (end of line)
-------> Screen: H (top of screen), M (middle of screen), L (bottom of screen)
-------> Scroll: Ctrl+u (up), Ctrl+d (down)
-------> File: gg (beginning of file), G (end of file)
-------> Line numbers: :{number}<CR> or {number}G (line {number})
-------> Misc: % (corresponding item)
-------> Find: f{character}, t{character}, F{character}, T{character}
---------> find/to forward/backward {character} on the current line
---------> , / ; for navigating matches
-------> Search: /{regex}, n / N for navigating matches

---> Selection
-----> Visual modes:
-------> Visual: v
-------> Visual Line: V
-------> Visual Block: Ctrl+v
-----> Can use movement keys to make selection.

---> Edits
-----> Everything that you used to do with the mouse, you now do with the keyboard using editing commands that compose with movement commands. 
-----> Here’s where Vim’s interface starts to look like a programming language. 
-----> Vim’s editing commands are also called “verbs”, because verbs act on nouns.
-------> i enter Insert mode
---------> but for manipulating/deleting text, want to use something more than backspace
-------> o / O insert line below / above
-------> d{motion} delete {motion}
---------> e.g. dw is delete word, d$ is delete to end of line, d0 is delete to beginning of line
-------> c{motion} change {motion}
---------> e.g. cw is change word
---------> like d{motion} followed by i
-------> x delete character (equal do dl)
-------> s substitute character (equal to xi)
-------> Visual mode + manipulation
---------> select text, d to delete it or c to change it
-------> u to undo, <C-r> to redo
-------> y to copy / “yank” (some other commands like d also copy)
-------> p to paste
-------> Lots more to learn: e.g. ~ flips the case of a character

---> Counts
-----> You can combine nouns and verbs with a count, which will perform a given action a number of times.
-------> 3w move 3 words forward
-------> 5j move 5 lines down
-------> 7dw delete 7 words

---> Modifiers
-----> You can use modifiers to change the meaning of a noun. 
-----> Some modifiers are i, which means “inner” or “inside”, and a, which means “around”.
-------> ci( change the contents inside the current pair of parentheses
-------> ci[ change the contents inside the current pair of square brackets
-------> da' delete a single-quoted string, including the surrounding single quotes

---> Demo

-----> Here is a broken fizz buzz implementation:
-------> def fizz_buzz(limit):
---------> for i in range(limit):
-----------> if i % 3 == 0:
-------------> print('fizz')
-----------> if i % 5 == 0:
-------------> print('fizz')
-----------> if i % 3 and i % 5:
-------------> print(i)
-------> def main():
---------> fizz_buzz(10)
-----> We will fix the following issues:
-------> Main is never called
-------> Starts at 0 instead of 1
-------> Prints “fizz” and “buzz” on separate lines for multiples of 15
-------> Prints “fizz” for multiples of 5
-------> Uses a hard-coded argument of 10 instead of taking a command-line argument
-----> See the lecture video for the demonstration. 
-------> Compare how the above changes are made using Vim to how you might make the same edits using another program. 
-------> Notice how very few keystrokes are required in Vim, allowing you to edit at the speed you think.

---> Customizing Vim

-----> Vim is customized through a plain-text configuration file in ~/.vimrc (containing Vimscript commands). 
-------> There are probably lots of basic settings that you want to turn on.
-----> We are providing a well-documented basic config that you can use as a starting point. 
-------> We recommend using this because it fixes some of Vim’s quirky default behavior. 
-------> Download our config here and save it to ~/.vimrc.
-----> Vim is heavily customizable, and it’s worth spending time exploring customization options. 
-------> You can look at people’s dotfiles on GitHub for inspiration, for example, your instructors’ Vim configs (Anish, Jon (uses neovim), Jose). 
-------> There are lots of good blog posts on this topic too. 
-------> Try not to copy-and-paste people’s full configuration, but read it, understand it, and take what you need.

---> Extending Vim

-----> There are tons of plugins for extending Vim. 
-------> Contrary to outdated advice that you might find on the internet, you do not need to use a plugin manager for Vim (since Vim 8.0). 
-------> Instead, you can use the built-in package management system. 
-------> Simply create the directory ~/.vim/pack/vendor/start/, and put plugins in there (e.g. via git clone).
-----> Here are some of our favorite plugins:
-------> ctrlp.vim: fuzzy file finder
-------> ack.vim: code search
-------> nerdtree: file explorer
-------> vim-easymotion: magic motions
-----> We’re trying to avoid giving an overwhelmingly long list of plugins here. You can check out the instructors’ dotfiles (Anish, Jon, Jose) to see what other plugins we use. 
-------> Check out Vim Awesome for more awesome Vim plugins. 
-------> There are also tons of blog posts on this topic: just search for “best Vim plugins”.

---> Vim-mode in other programs

-----> Many tools support Vim emulation. 
-------> The quality varies from good to great; depending on the tool, it may not support the fancier Vim features, but most cover the basics pretty well.

-----> Shell
-------> If you’re a Bash user, use set -o vi. 
-------> If you use Zsh, bindkey -v. For Fish, fish_vi_key_bindings. 
-------> Additionally, no matter what shell you use, you can export EDITOR=vim. 
-------> This is the environment variable used to decide which editor is launched when a program wants to start an editor. 
-------> For example, git will use this editor for commit messages.

-----> Readline
-------> Many programs use the GNU Readline library for their command-line interface. 
-------> Readline supports (basic) Vim emulation too, which can be enabled by adding the following line to the ~/.inputrc file:
---------> set editing-mode vi
-------> With this setting, for example, the Python REPL will support Vim bindings.

-----> Others
-------> There are even vim keybinding extensions for web browsers - some popular ones are Vimium for Google Chrome and Tridactyl for Firefox. 
-------> You can even get Vim bindings in Jupyter notebooks. 
-------> Here is a long list of software with vim-like keybindings.

---> Advanced Vim

-----> Here are a few examples to show you the power of the editor. 
-------> We can’t teach you all of these kinds of things, but you’ll learn them as you go. 
-------> A good heuristic: whenever you’re using your editor and you think “there must be a better way of doing this”, there probably is: look it up online.

-----> Search and replace
-------> :s (substitute) command (documentation).
---------> %s/foo/bar/g
-----------> replace foo with bar globally in file
---------> %s/\[.*\](\(.*\))/\1/g
-----------> replace named Markdown links with plain URLs

-----> Multiple windows
-------> :sp / :vsp to split windows
-------> Can have multiple views of the same buffer.

-----> Macros
-------> q{character} to start recording a macro in register {character}
-------> q to stop recording
-------> @{character} replays the macro
-------> Macro execution stops on error
-------> {number}@{character} executes a macro {number} times
-------> Macros can be recursive
---------> first clear the macro with q{character}q
---------> record the macro, with @{character} to invoke the macro recursively (will be a no-op until recording is complete)
-------> Example: convert xml to json (file)
---------> Array of objects with keys “name” / “email”
---------> Use a Python program?
---------> Use sed / regexes
----------->  g/people/d
----------->  %s/<person>/{/g
----------->  %s/<name>\(.*\)<\/name>/"name": "\1",/g
----------->  …
---------> Vim commands / macros
-----------> Gdd, ggdd delete first and last lines
-----------> Macro to format a single element (register e)
-------------> Go to line with <name>
-------------> qe^r"f>s": "<ESC>f<C"<ESC>q
-----------> Macro to format a person
-------------> Go to line with <person>
-------------> qpS{<ESC>j@eA,<ESC>j@ejS},<ESC>q
-----------> Macro to format a person and go to the next person
-------------> Go to line with <person>
-------------> qq@pjq
-----------> Execute macro until end of file
-------------> 999@q
-----------> Manually remove last , and add [ and ] delimiters

---> Resources

-----> vimtutor is a tutorial that comes installed with Vim - if Vim is installed, you should be able to run vimtutor from your shell
-----> Vim Adventures is a game to learn Vim
-----> Vim Tips Wiki
-----> Vim Advent Calendar has various Vim tips
-----> Vim Golf is code golf, but where the programming language is Vim’s UI
-----> Vi/Vim Stack Exchange
-----> Vim Screencasts
-----> Practical Vim (book)


---> Exercises

-----> (1) Experiment with some editors. Try at least one command-line editor (e.g. Vim) and at least one GUI editor (e.g. Atom). 
-------> Learn through tutorials like vimtutor (or the equivalents for other editors). 
-------> To get a real feel for a new editor, commit to using it exclusively for a couple days while going about your work. 
-----> (2) Customize your editor. Look through tips and tricks online, and look through other people’s configurations (often, they are well-documented).
-----> (3) Experiment with plugins for your editor.
-----> (4) Commit to using a powerful editor for at least a couple weeks: you should start seeing the benefits by then. 
-------> At some point, you should be able to get your editor to work as fast as you think.
-----> (5) Install a linter (e.g. pyflakes for python) link it to your editor and test it is working.

-----> (1) Complete vimtutor. 
-------> Note: it looks best in a 80x24 (80 columns by 24 lines) terminal window.
-----> (2) Download our basic vimrc and save it to ~/.vimrc. 
-------> Read through the well-commented file (using Vim!), and observe how Vim looks and behaves slightly differently with the new config.
-----> (3) Install and configure a plugin: ctrlp.vim.
-------> Create the plugins directory with mkdir -p ~/.vim/pack/vendor/start
-------> Download the plugin: cd ~/.vim/pack/vendor/start; git clone https://github.com/ctrlpvim/ctrlp.vim
-------> Read the documentation for the plugin. Try using CtrlP to locate a file by navigating to a project directory, opening Vim, and using the Vim command-line to start :CtrlP.
-------> Customize CtrlP by adding configuration to your ~/.vimrc to open CtrlP by pressing Ctrl+P.
-----> (4) To practice using Vim, re-do the Demo from lecture on your own machine.
-----> (5) Use Vim for all your text editing for the next month. 
-------> Whenever something seems inefficient, or when you think “there must be a better way”, try Googling it, there probably is. 
-------> If you get stuck, come to office hours or send us an email.
-----> (6) Configure your other tools to use Vim bindings (see instructions above).
-----> (7) Further customize your ~/.vimrc and install more plugins.
-----> (8) (Advanced) Convert XML to JSON (example file) using Vim macros. 
-------> Try to do this on your own, but you can look at the macros section above if you get stuck.