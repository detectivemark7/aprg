#include <ChessUtilities/Board/Board.hpp>
#include <Common/Debug/AlbaDebug.hpp>  // for debugging

#include <gtest/gtest.h>

using namespace std;

namespace {

static alba::chess::Board::PieceMatrix emptyMatrix(8U, 8U, {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                                                            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                                                            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                                                            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                                                            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                                                            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0});
static alba::chess::Board::PieceMatrix matrixWithBW(8U, 8U, {0xC, 0xA, 0xB, 0xD, 0xE, 0xB, 0xA, 0xC, 0x9, 0x9, 0x9,
                                                             0x9, 0x9, 0x9, 0x9, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                                                             0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                                                             0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                                                             0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1,
                                                             0x1, 0x4, 0x2, 0x3, 0x5, 0x6, 0x3, 0x2, 0x4});
static alba::chess::Board::PieceMatrix matrixWithWB(8U, 8U, {0x4, 0x2, 0x3, 0x6, 0x5, 0x3, 0x2, 0x4, 0x1, 0x1, 0x1,
                                                             0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                                                             0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                                                             0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                                                             0x0, 0x0, 0x0, 0x0, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9,
                                                             0x9, 0xC, 0xA, 0xB, 0xE, 0xD, 0xB, 0xA, 0xC});
static alba::chess::Board::PieceMatrix matrixFullOfWhitePawns(
    8U, 8U,
    {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1,
     0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1,
     0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1});
}  // namespace

namespace alba {

namespace chess {

TEST(BoardTest, ConstructionWorks) {
    Board boardDefaultConstructed;
    Board boardConstructedWithOrientation(Board::Orientation::BlackUpWhiteDown);
    Board boardConstructedWithOrientationAndPieceMatrix(
        Board::Orientation::WhiteUpBlackDown,
        {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1,
         0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1,
         0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1});

    EXPECT_EQ(Board::Orientation::Unknown, boardDefaultConstructed.getOrientation());
    EXPECT_EQ(emptyMatrix, boardDefaultConstructed.getPieceMatrix());
    EXPECT_EQ(Board::Orientation::BlackUpWhiteDown, boardConstructedWithOrientation.getOrientation());
    EXPECT_EQ(matrixWithBW, boardConstructedWithOrientation.getPieceMatrix());
    EXPECT_EQ(Board::Orientation::WhiteUpBlackDown, boardConstructedWithOrientationAndPieceMatrix.getOrientation());
    EXPECT_EQ(matrixFullOfWhitePawns, boardConstructedWithOrientationAndPieceMatrix.getPieceMatrix());
}

TEST(BoardTest, EqualOperatorWorks) {
    Board boardWithBW(Board::Orientation::BlackUpWhiteDown);
    Board boardWithWB(Board::Orientation::WhiteUpBlackDown);
    Board boardWithWrongOrientation(boardWithBW);
    boardWithWrongOrientation.setOrientation(Board::Orientation::WhiteUpBlackDown);
    Board boardWithOneWrongPiece(boardWithBW);
    boardWithOneWrongPiece.setPieceAt({3, 3}, Piece(PieceColorAndType::WhiteQueen));

    EXPECT_TRUE(boardWithBW.operator==(boardWithBW));
    EXPECT_FALSE(boardWithBW.operator==(boardWithWB));
    EXPECT_FALSE(boardWithBW.operator==(boardWithWrongOrientation));
    EXPECT_FALSE(boardWithBW.operator==(boardWithOneWrongPiece));
}

TEST(BoardTest, NotEqualOperatorWorks) {
    Board boardWithBW(Board::Orientation::BlackUpWhiteDown);
    Board boardWithWB(Board::Orientation::WhiteUpBlackDown);
    Board boardWithWrongOrientation(boardWithBW);
    boardWithWrongOrientation.setOrientation(Board::Orientation::WhiteUpBlackDown);
    Board boardWithOneWrongPiece(boardWithBW);
    boardWithOneWrongPiece.setPieceAt({3, 3}, Piece(PieceColorAndType::WhiteQueen));

    EXPECT_FALSE(boardWithBW.operator!=(boardWithBW));
    EXPECT_TRUE(boardWithBW.operator!=(boardWithWB));
    EXPECT_TRUE(boardWithBW.operator!=(boardWithWrongOrientation));
    EXPECT_TRUE(boardWithBW.operator!=(boardWithOneWrongPiece));
}

TEST(BoardTest, GetOrientationWorks) {
    Board boardWithBW(Board::Orientation::BlackUpWhiteDown);
    Board boardWithWB(Board::Orientation::WhiteUpBlackDown);

    EXPECT_EQ(Board::Orientation::BlackUpWhiteDown, boardWithBW.getOrientation());
    EXPECT_EQ(Board::Orientation::WhiteUpBlackDown, boardWithWB.getOrientation());
}

TEST(BoardTest, GetPieceMatrixWorks) {
    Board boardWithBW(Board::Orientation::BlackUpWhiteDown);
    Board boardWithWB(Board::Orientation::WhiteUpBlackDown);

    EXPECT_EQ(matrixWithBW, boardWithBW.getPieceMatrix());
    EXPECT_EQ(matrixWithWB, boardWithWB.getPieceMatrix());
}

TEST(BoardTest, GetMovesFromThisWorksOnOneStepPawnNonCapture) {
    Board boardWithBW(
        Board::Orientation::BlackUpWhiteDown,
        {0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1});
    Board boardWithWB(
        Board::Orientation::WhiteUpBlackDown,
        {0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9});

    Moves expectedMovesAtTheBottom{{{7, 7}, {7, 6}}};
    Moves expectedMovesAtTheTop{{{0, 0}, {0, 1}}};
    EXPECT_EQ(expectedMovesAtTheBottom, boardWithBW.getMovesFromThis({7, 7}));
    EXPECT_EQ(expectedMovesAtTheBottom, boardWithWB.getMovesFromThis({7, 7}));
    EXPECT_EQ(expectedMovesAtTheTop, boardWithBW.getMovesFromThis({0, 0}));
    EXPECT_EQ(expectedMovesAtTheTop, boardWithWB.getMovesFromThis({0, 0}));
}

TEST(BoardTest, GetMovesFromThisWorksOnTwoStepsPawnNonCapture) {
    Board boardWithBW(
        Board::Orientation::BlackUpWhiteDown,
        {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0});
    Board boardWithWB(
        Board::Orientation::WhiteUpBlackDown,
        {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0});

    Moves expectedMovesAtTheBottom{{{7, 6}, {7, 5}}, {{7, 6}, {7, 4}}};
    Moves expectedMovesAtTheTop{{{0, 1}, {0, 2}}, {{0, 1}, {0, 3}}};
    EXPECT_EQ(expectedMovesAtTheBottom, boardWithBW.getMovesFromThis({7, 6}));
    EXPECT_EQ(expectedMovesAtTheBottom, boardWithWB.getMovesFromThis({7, 6}));
    EXPECT_EQ(expectedMovesAtTheTop, boardWithBW.getMovesFromThis({0, 1}));
    EXPECT_EQ(expectedMovesAtTheTop, boardWithWB.getMovesFromThis({0, 1}));
}

TEST(BoardTest, GetMovesFromThisWorksOnPawnCapture) {
    Board boardWithBW(
        Board::Orientation::BlackUpWhiteDown,
        {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x9, 0x9, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0});
    Board boardWithWB(
        Board::Orientation::WhiteUpBlackDown,
        {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x9, 0x9, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0});

    Moves expectedMovesAtTheBottom{{{6, 6}, {5, 5}}, {{6, 6}, {7, 5}}};
    Moves expectedMovesAtTheTop{{{1, 1}, {0, 2}}, {{1, 1}, {2, 2}}};
    EXPECT_EQ(expectedMovesAtTheBottom, boardWithBW.getMovesFromThis({6, 6}));
    EXPECT_EQ(expectedMovesAtTheBottom, boardWithWB.getMovesFromThis({6, 6}));
    EXPECT_EQ(expectedMovesAtTheTop, boardWithBW.getMovesFromThis({1, 1}));
    EXPECT_EQ(expectedMovesAtTheTop, boardWithWB.getMovesFromThis({1, 1}));
}

TEST(BoardTest, GetMovesFromThisWorksOnPawnMoves) {
    Board boardWithBW(
        Board::Orientation::BlackUpWhiteDown,
        {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x9, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0});
    Board boardWithWB(
        Board::Orientation::WhiteUpBlackDown,
        {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x9, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0});

    Moves expectedMovesAtTheBottom{{{6, 6}, {6, 5}}, {{6, 6}, {6, 4}}, {{6, 6}, {5, 5}}, {{6, 6}, {7, 5}}};
    Moves expectedMovesAtTheTop{{{1, 1}, {1, 2}}, {{1, 1}, {1, 3}}, {{1, 1}, {0, 2}}, {{1, 1}, {2, 2}}};
    EXPECT_EQ(expectedMovesAtTheBottom, boardWithBW.getMovesFromThis({6, 6}));
    EXPECT_EQ(expectedMovesAtTheBottom, boardWithWB.getMovesFromThis({6, 6}));
    EXPECT_EQ(expectedMovesAtTheTop, boardWithBW.getMovesFromThis({1, 1}));
    EXPECT_EQ(expectedMovesAtTheTop, boardWithWB.getMovesFromThis({1, 1}));
}

TEST(BoardTest, GetMovesFromThisWorksOnKnightMoves) {
    Board boardWithBW(
        Board::Orientation::BlackUpWhiteDown,
        {0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0xA, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0});
    Board boardWithWB(
        Board::Orientation::WhiteUpBlackDown,
        {0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xA, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0});

    Moves expectedMovesAtTheBottom{{{6, 6}, {4, 5}}, {{6, 6}, {5, 4}}, {{6, 6}, {7, 4}}};
    Moves expectedMovesAtTheTop{{{1, 1}, {0, 3}}, {{1, 1}, {2, 3}}, {{1, 1}, {3, 2}}};
    EXPECT_EQ(expectedMovesAtTheBottom, boardWithBW.getMovesFromThis({6, 6}));
    EXPECT_EQ(expectedMovesAtTheBottom, boardWithWB.getMovesFromThis({6, 6}));
    EXPECT_EQ(expectedMovesAtTheTop, boardWithBW.getMovesFromThis({1, 1}));
    EXPECT_EQ(expectedMovesAtTheTop, boardWithWB.getMovesFromThis({1, 1}));
}

TEST(BoardTest, GetMovesFromThisWorksOnBishopMoves) {
    Board boardWithBW(
        Board::Orientation::BlackUpWhiteDown,
        {0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xB, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0});
    Board boardWithWB(
        Board::Orientation::WhiteUpBlackDown,
        {0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0xB, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0});

    Moves expectedMovesAtTheBottom{{{5, 5}, {4, 4}}, {{5, 5}, {3, 3}}, {{5, 5}, {2, 2}}, {{5, 5}, {4, 6}},
                                   {{5, 5}, {3, 7}}, {{5, 5}, {6, 4}}, {{5, 5}, {6, 6}}, {{5, 5}, {7, 7}}};
    Moves expectedMovesAtTheTop{{{2, 2}, {1, 1}}, {{2, 2}, {0, 0}}, {{2, 2}, {1, 3}}, {{2, 2}, {3, 1}},
                                {{2, 2}, {4, 0}}, {{2, 2}, {3, 3}}, {{2, 2}, {4, 4}}, {{2, 2}, {5, 5}}};
    EXPECT_EQ(expectedMovesAtTheBottom, boardWithBW.getMovesFromThis({5, 5}));
    EXPECT_EQ(expectedMovesAtTheBottom, boardWithWB.getMovesFromThis({5, 5}));
    EXPECT_EQ(expectedMovesAtTheTop, boardWithBW.getMovesFromThis({2, 2}));
    EXPECT_EQ(expectedMovesAtTheTop, boardWithWB.getMovesFromThis({2, 2}));
}

TEST(BoardTest, GetMovesFromThisWorksOnRookMoves) {
    Board boardWithBW(
        Board::Orientation::BlackUpWhiteDown,
        {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0xC, 0x0, 0x9, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1,
         0x0, 0x4, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0});
    Board boardWithWB(
        Board::Orientation::WhiteUpBlackDown,
        {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x4, 0x0, 0x1, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9,
         0x0, 0xC, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0});

    Moves expectedMovesAtTheBottom{{{5, 5}, {5, 4}}, {{5, 5}, {5, 6}}, {{5, 5}, {5, 7}},
                                   {{5, 5}, {4, 5}}, {{5, 5}, {6, 5}}, {{5, 5}, {7, 5}}};
    Moves expectedMovesAtTheTop{{{2, 2}, {2, 1}}, {{2, 2}, {2, 0}}, {{2, 2}, {2, 3}},
                                {{2, 2}, {1, 2}}, {{2, 2}, {0, 2}}, {{2, 2}, {3, 2}}};
    EXPECT_EQ(expectedMovesAtTheBottom, boardWithBW.getMovesFromThis({5, 5}));
    EXPECT_EQ(expectedMovesAtTheBottom, boardWithWB.getMovesFromThis({5, 5}));
    EXPECT_EQ(expectedMovesAtTheTop, boardWithBW.getMovesFromThis({2, 2}));
    EXPECT_EQ(expectedMovesAtTheTop, boardWithWB.getMovesFromThis({2, 2}));
}

TEST(BoardTest, GetMovesFromThisWorksOnQueenMoves) {
    Board boardWithBW(
        Board::Orientation::BlackUpWhiteDown,
        {0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0xD, 0x0, 0x9, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x9, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1,
         0x0, 0x5, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0});
    Board boardWithWB(
        Board::Orientation::WhiteUpBlackDown,
        {0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x5, 0x0, 0x1, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x9, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9,
         0x0, 0xD, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0});

    Moves expectedMovesAtTheBottom{{{5, 5}, {4, 4}}, {{5, 5}, {3, 3}}, {{5, 5}, {2, 2}}, {{5, 5}, {4, 6}},
                                   {{5, 5}, {3, 7}}, {{5, 5}, {6, 4}}, {{5, 5}, {6, 6}}, {{5, 5}, {7, 7}},
                                   {{5, 5}, {5, 4}}, {{5, 5}, {5, 6}}, {{5, 5}, {5, 7}}, {{5, 5}, {4, 5}},
                                   {{5, 5}, {6, 5}}, {{5, 5}, {7, 5}}};
    Moves expectedMovesAtTheTop{{{2, 2}, {1, 1}}, {{2, 2}, {0, 0}}, {{2, 2}, {1, 3}}, {{2, 2}, {3, 1}},
                                {{2, 2}, {4, 0}}, {{2, 2}, {3, 3}}, {{2, 2}, {4, 4}}, {{2, 2}, {5, 5}},
                                {{2, 2}, {2, 1}}, {{2, 2}, {2, 0}}, {{2, 2}, {2, 3}}, {{2, 2}, {1, 2}},
                                {{2, 2}, {0, 2}}, {{2, 2}, {3, 2}}};
    EXPECT_EQ(expectedMovesAtTheBottom, boardWithBW.getMovesFromThis({5, 5}));
    EXPECT_EQ(expectedMovesAtTheBottom, boardWithWB.getMovesFromThis({5, 5}));
    EXPECT_EQ(expectedMovesAtTheTop, boardWithBW.getMovesFromThis({2, 2}));
    EXPECT_EQ(expectedMovesAtTheTop, boardWithWB.getMovesFromThis({2, 2}));
}

TEST(BoardTest, GetMovesFromThisWorksOnKingOneStepMoves) {
    Board boardWithBW(
        Board::Orientation::BlackUpWhiteDown,
        {0xE, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x6});
    Board boardWithWB(
        Board::Orientation::WhiteUpBlackDown,
        {0x6, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0xE});

    Moves expectedMovesAtTheBottom{{{7, 7}, {6, 6}}, {{7, 7}, {7, 6}}};
    Moves expectedMovesAtTheTop{{{0, 0}, {0, 1}}, {{0, 0}, {1, 1}}};
    EXPECT_EQ(expectedMovesAtTheBottom, boardWithBW.getMovesFromThis({7, 7}));
    EXPECT_EQ(expectedMovesAtTheBottom, boardWithWB.getMovesFromThis({7, 7}));
    EXPECT_EQ(expectedMovesAtTheTop, boardWithBW.getMovesFromThis({0, 0}));
    EXPECT_EQ(expectedMovesAtTheTop, boardWithWB.getMovesFromThis({0, 0}));
}

TEST(BoardTest, GetMovesFromThisWorksOnKingMovesWithCastling) {
    Board boardWithBW(
        Board::Orientation::BlackUpWhiteDown,
        {0xC, 0x0, 0x0, 0x0, 0xE, 0x0, 0x0, 0xC, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x6, 0x0, 0x0, 0x4});
    Board boardWithWB(
        Board::Orientation::WhiteUpBlackDown,
        {0x4, 0x0, 0x0, 0x6, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xC, 0x0, 0x0, 0xE, 0x0, 0x0, 0x0, 0xC});

    Moves expectedMovesAtTheBottomOfBW{{{4, 7}, {3, 6}}, {{4, 7}, {3, 7}}, {{4, 7}, {4, 6}}, {{4, 7}, {5, 6}},
                                       {{4, 7}, {5, 7}}, {{4, 7}, {2, 7}}, {{4, 7}, {6, 7}}};
    Moves expectedMovesAtTheBottomOfWB{{{3, 7}, {2, 6}}, {{3, 7}, {2, 7}}, {{3, 7}, {3, 6}}, {{3, 7}, {4, 6}},
                                       {{3, 7}, {4, 7}}, {{3, 7}, {1, 7}}, {{3, 7}, {5, 7}}};
    Moves expectedMovesAtTheTopOfBW{{{4, 0}, {3, 0}}, {{4, 0}, {3, 1}}, {{4, 0}, {4, 1}}, {{4, 0}, {5, 0}},
                                    {{4, 0}, {5, 1}}, {{4, 0}, {2, 0}}, {{4, 0}, {6, 0}}};
    Moves expectedMovesAtTheTopOfWB{{{3, 0}, {2, 0}}, {{3, 0}, {2, 1}}, {{3, 0}, {3, 1}}, {{3, 0}, {4, 0}},
                                    {{3, 0}, {4, 1}}, {{3, 0}, {1, 0}}, {{3, 0}, {5, 0}}};
    EXPECT_EQ(expectedMovesAtTheBottomOfBW, boardWithBW.getMovesFromThis({4, 7}));
    EXPECT_EQ(expectedMovesAtTheBottomOfWB, boardWithWB.getMovesFromThis({3, 7}));
    EXPECT_EQ(expectedMovesAtTheTopOfBW, boardWithBW.getMovesFromThis({4, 0}));
    EXPECT_EQ(expectedMovesAtTheTopOfWB, boardWithWB.getMovesFromThis({3, 0}));
}

TEST(BoardTest, GetMovesFromThisWorksOnKingMovesWithNoCastlingDueToBlocking) {
    Board boardWithBW(
        Board::Orientation::BlackUpWhiteDown,
        {0xC, 0x0, 0x9, 0x0, 0xE, 0x0, 0x1, 0xC, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x1, 0x0, 0x6, 0x0, 0x9, 0x4});
    Board boardWithWB(
        Board::Orientation::WhiteUpBlackDown,
        {0x4, 0x1, 0x0, 0x6, 0x0, 0x9, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xC, 0x9, 0x0, 0xE, 0x0, 0x1, 0x0, 0xC});

    Moves expectedMovesAtTheBottomOfBW{
        {{4, 7}, {3, 6}}, {{4, 7}, {3, 7}}, {{4, 7}, {4, 6}}, {{4, 7}, {5, 6}}, {{4, 7}, {5, 7}}};
    Moves expectedMovesAtTheBottomOfWB{
        {{3, 7}, {2, 6}}, {{3, 7}, {2, 7}}, {{3, 7}, {3, 6}}, {{3, 7}, {4, 6}}, {{3, 7}, {4, 7}}};
    Moves expectedMovesAtTheTopOfBW{
        {{4, 0}, {3, 0}}, {{4, 0}, {3, 1}}, {{4, 0}, {4, 1}}, {{4, 0}, {5, 0}}, {{4, 0}, {5, 1}}};
    Moves expectedMovesAtTheTopOfWB{
        {{3, 0}, {2, 0}}, {{3, 0}, {2, 1}}, {{3, 0}, {3, 1}}, {{3, 0}, {4, 0}}, {{3, 0}, {4, 1}}};
    EXPECT_EQ(expectedMovesAtTheBottomOfBW, boardWithBW.getMovesFromThis({4, 7}));
    EXPECT_EQ(expectedMovesAtTheBottomOfWB, boardWithWB.getMovesFromThis({3, 7}));
    EXPECT_EQ(expectedMovesAtTheTopOfBW, boardWithBW.getMovesFromThis({4, 0}));
    EXPECT_EQ(expectedMovesAtTheTopOfWB, boardWithWB.getMovesFromThis({3, 0}));
}

TEST(BoardTest, GetMovesToThisWorksOnOneAndTwoStepPawnNonCapture) {
    Board boardWithBW(
        Board::Orientation::BlackUpWhiteDown,
        {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0});
    Board boardWithWB(
        Board::Orientation::WhiteUpBlackDown,
        {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0});

    Moves expectedMovesAtTheBottomOneStep{{{7, 6}, {7, 5}}};
    Moves expectedMovesAtTheBottomTwoStep{{{7, 6}, {7, 4}}};
    Moves expectedMovesAtTheTopOneStep{{{0, 1}, {0, 2}}};
    Moves expectedMovesAtTheTopTwoStep{{{0, 1}, {0, 3}}};
    EXPECT_EQ(expectedMovesAtTheBottomOneStep, boardWithBW.getMovesToThis({7, 5}, PieceColor::White));
    EXPECT_EQ(expectedMovesAtTheBottomOneStep, boardWithWB.getMovesToThis({7, 5}, PieceColor::Black));
    EXPECT_EQ(expectedMovesAtTheBottomTwoStep, boardWithBW.getMovesToThis({7, 4}, PieceColor::White));
    EXPECT_EQ(expectedMovesAtTheBottomTwoStep, boardWithWB.getMovesToThis({7, 4}, PieceColor::Black));
    EXPECT_EQ(expectedMovesAtTheTopOneStep, boardWithBW.getMovesToThis({0, 2}, PieceColor::Black));
    EXPECT_EQ(expectedMovesAtTheTopOneStep, boardWithWB.getMovesToThis({0, 2}, PieceColor::White));
    EXPECT_EQ(expectedMovesAtTheTopTwoStep, boardWithBW.getMovesToThis({0, 3}, PieceColor::Black));
    EXPECT_EQ(expectedMovesAtTheTopTwoStep, boardWithWB.getMovesToThis({0, 3}, PieceColor::White));
}

TEST(BoardTest, GetMovesToThisWorksOnPawnCapture) {
    Board boardWithBW(
        Board::Orientation::BlackUpWhiteDown,
        {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x9, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0});
    Board boardWithWB(
        Board::Orientation::WhiteUpBlackDown,
        {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x9, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0});

    Moves expectedMovesAtTheBottom{{{6, 6}, {5, 5}}};
    Moves expectedMovesAtTheTop{{{1, 1}, {2, 2}}};
    EXPECT_EQ(expectedMovesAtTheBottom, boardWithBW.getMovesToThis({5, 5}, PieceColor::White));
    EXPECT_EQ(expectedMovesAtTheBottom, boardWithWB.getMovesToThis({5, 5}, PieceColor::Black));
    EXPECT_TRUE(boardWithBW.getMovesToThis({7, 5}, PieceColor::White).empty());
    EXPECT_TRUE(boardWithWB.getMovesToThis({7, 5}, PieceColor::Black).empty());
    EXPECT_EQ(expectedMovesAtTheTop, boardWithBW.getMovesToThis({2, 2}, PieceColor::Black));
    EXPECT_EQ(expectedMovesAtTheTop, boardWithWB.getMovesToThis({2, 2}, PieceColor::White));
    EXPECT_TRUE(boardWithBW.getMovesToThis({0, 2}, PieceColor::Black).empty());
    EXPECT_TRUE(boardWithWB.getMovesToThis({0, 2}, PieceColor::White).empty());
}

TEST(BoardTest, GetMovesToThisWorksOnKnightMoves) {
    Board boardWithBW(
        Board::Orientation::BlackUpWhiteDown,
        {0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0xA, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0});
    Board boardWithWB(
        Board::Orientation::WhiteUpBlackDown,
        {0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xA, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0});

    Moves expectedMovesAtTheBottomWithEmptySpace{{{6, 6}, {4, 5}}};
    Moves expectedMovesAtTheBottomWithOpponentsPiece{{{6, 6}, {7, 4}}};
    Moves expectedMovesAtTheTopWithEmptySpace{{{1, 1}, {3, 2}}};
    Moves expectedMovesAtTheTopWithOpponentsPiece{{{1, 1}, {0, 3}}};
    EXPECT_EQ(expectedMovesAtTheBottomWithEmptySpace, boardWithBW.getMovesToThis({4, 5}, PieceColor::White));
    EXPECT_EQ(expectedMovesAtTheBottomWithEmptySpace, boardWithWB.getMovesToThis({4, 5}, PieceColor::Black));
    EXPECT_EQ(expectedMovesAtTheBottomWithOpponentsPiece, boardWithBW.getMovesToThis({7, 4}, PieceColor::White));
    EXPECT_EQ(expectedMovesAtTheBottomWithOpponentsPiece, boardWithWB.getMovesToThis({7, 4}, PieceColor::Black));
    EXPECT_TRUE(boardWithBW.getMovesToThis({5, 7}, PieceColor::White).empty());
    EXPECT_TRUE(boardWithWB.getMovesToThis({5, 7}, PieceColor::Black).empty());
    EXPECT_EQ(expectedMovesAtTheTopWithEmptySpace, boardWithBW.getMovesToThis({3, 2}, PieceColor::Black));
    EXPECT_EQ(expectedMovesAtTheTopWithEmptySpace, boardWithWB.getMovesToThis({3, 2}, PieceColor::White));
    EXPECT_EQ(expectedMovesAtTheTopWithOpponentsPiece, boardWithBW.getMovesToThis({0, 3}, PieceColor::Black));
    EXPECT_EQ(expectedMovesAtTheTopWithOpponentsPiece, boardWithWB.getMovesToThis({0, 3}, PieceColor::White));
    EXPECT_TRUE(boardWithBW.getMovesToThis({3, 0}, PieceColor::Black).empty());
    EXPECT_TRUE(boardWithWB.getMovesToThis({3, 0}, PieceColor::White).empty());
}

TEST(BoardTest, GetMovesToThisWorksOnBishopMoves) {
    Board boardWithBW(
        Board::Orientation::BlackUpWhiteDown,
        {0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xB, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0});
    Board boardWithWB(
        Board::Orientation::WhiteUpBlackDown,
        {0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0xB, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0});

    Moves expectedMovesAtTheBottomWithEmptySpace{{{5, 5}, {7, 7}}};
    Moves expectedMovesAtTheBottomWithOpponentsPiece{{{5, 5}, {3, 7}}};
    Moves expectedMovesAtTheTopWithEmptySpace{{{2, 2}, {0, 0}}};
    Moves expectedMovesAtTheTopWithOpponentsPiece{{{2, 2}, {4, 0}}};
    EXPECT_EQ(expectedMovesAtTheBottomWithEmptySpace, boardWithBW.getMovesToThis({7, 7}, PieceColor::White));
    EXPECT_EQ(expectedMovesAtTheBottomWithEmptySpace, boardWithWB.getMovesToThis({7, 7}, PieceColor::Black));
    EXPECT_EQ(expectedMovesAtTheBottomWithOpponentsPiece, boardWithBW.getMovesToThis({3, 7}, PieceColor::White));
    EXPECT_EQ(expectedMovesAtTheBottomWithOpponentsPiece, boardWithWB.getMovesToThis({3, 7}, PieceColor::Black));
    EXPECT_TRUE(boardWithBW.getMovesToThis({7, 3}, PieceColor::White).empty());
    EXPECT_TRUE(boardWithWB.getMovesToThis({7, 3}, PieceColor::Black).empty());
    EXPECT_EQ(expectedMovesAtTheTopWithEmptySpace, boardWithBW.getMovesToThis({0, 0}, PieceColor::Black));
    EXPECT_EQ(expectedMovesAtTheTopWithEmptySpace, boardWithWB.getMovesToThis({0, 0}, PieceColor::White));
    EXPECT_EQ(expectedMovesAtTheTopWithOpponentsPiece, boardWithBW.getMovesToThis({4, 0}, PieceColor::Black));
    EXPECT_EQ(expectedMovesAtTheTopWithOpponentsPiece, boardWithWB.getMovesToThis({4, 0}, PieceColor::White));
    EXPECT_TRUE(boardWithBW.getMovesToThis({0, 4}, PieceColor::Black).empty());
    EXPECT_TRUE(boardWithWB.getMovesToThis({0, 4}, PieceColor::White).empty());
}

TEST(BoardTest, GetMovesToThisWorksOnRookMoves) {
    Board boardWithBW(
        Board::Orientation::BlackUpWhiteDown,
        {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0xC, 0x0, 0x9, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1,
         0x0, 0x4, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0});
    Board boardWithWB(
        Board::Orientation::WhiteUpBlackDown,
        {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x4, 0x0, 0x1, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9,
         0x0, 0xC, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0});

    Moves expectedMovesAtTheBottomWithEmptySpace{{{5, 5}, {5, 7}}};
    Moves expectedMovesAtTheBottomWithOpponentsPiece{{{5, 5}, {7, 5}}};
    Moves expectedMovesAtTheTopWithEmptySpace{{{2, 2}, {2, 0}}};
    Moves expectedMovesAtTheTopWithOpponentsPiece{{{2, 2}, {0, 2}}};
    EXPECT_EQ(expectedMovesAtTheBottomWithEmptySpace, boardWithBW.getMovesToThis({5, 7}, PieceColor::White));
    EXPECT_EQ(expectedMovesAtTheBottomWithEmptySpace, boardWithWB.getMovesToThis({5, 7}, PieceColor::Black));
    EXPECT_EQ(expectedMovesAtTheBottomWithOpponentsPiece, boardWithBW.getMovesToThis({7, 5}, PieceColor::White));
    EXPECT_EQ(expectedMovesAtTheBottomWithOpponentsPiece, boardWithWB.getMovesToThis({7, 5}, PieceColor::Black));
    EXPECT_TRUE(boardWithBW.getMovesToThis({3, 5}, PieceColor::White).empty());
    EXPECT_TRUE(boardWithWB.getMovesToThis({3, 5}, PieceColor::Black).empty());
    EXPECT_EQ(expectedMovesAtTheTopWithEmptySpace, boardWithBW.getMovesToThis({2, 0}, PieceColor::Black));
    EXPECT_EQ(expectedMovesAtTheTopWithEmptySpace, boardWithWB.getMovesToThis({2, 0}, PieceColor::White));
    EXPECT_EQ(expectedMovesAtTheTopWithOpponentsPiece, boardWithBW.getMovesToThis({0, 2}, PieceColor::Black));
    EXPECT_EQ(expectedMovesAtTheTopWithOpponentsPiece, boardWithWB.getMovesToThis({0, 2}, PieceColor::White));
    EXPECT_TRUE(boardWithBW.getMovesToThis({4, 2}, PieceColor::Black).empty());
    EXPECT_TRUE(boardWithWB.getMovesToThis({4, 2}, PieceColor::White).empty());
}

TEST(BoardTest, GetMovesToThisWorksOnQueenMoves) {
    Board boardWithBW(
        Board::Orientation::BlackUpWhiteDown,
        {0x1, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xD, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x9});
    Board boardWithWB(
        Board::Orientation::WhiteUpBlackDown,
        {0x9, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0xD, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x1});

    Moves expectedMovesAtTheBottomWithEmptySpace{{{5, 5}, {7, 5}}};
    Moves expectedMovesAtTheBottomWithOpponentsPiece{{{5, 5}, {7, 7}}};
    Moves expectedMovesAtTheTopWithEmptySpace{{{2, 2}, {0, 2}}};
    Moves expectedMovesAtTheTopWithOpponentsPiece{{{2, 2}, {0, 0}}};
    EXPECT_EQ(expectedMovesAtTheBottomWithEmptySpace, boardWithBW.getMovesToThis({7, 5}, PieceColor::White));
    EXPECT_EQ(expectedMovesAtTheBottomWithEmptySpace, boardWithWB.getMovesToThis({7, 5}, PieceColor::Black));
    EXPECT_EQ(expectedMovesAtTheBottomWithOpponentsPiece, boardWithBW.getMovesToThis({7, 7}, PieceColor::White));
    EXPECT_EQ(expectedMovesAtTheBottomWithOpponentsPiece, boardWithWB.getMovesToThis({7, 7}, PieceColor::Black));
    EXPECT_TRUE(boardWithBW.getMovesToThis({5, 7}, PieceColor::White).empty());
    EXPECT_TRUE(boardWithWB.getMovesToThis({5, 7}, PieceColor::Black).empty());
    EXPECT_EQ(expectedMovesAtTheTopWithEmptySpace, boardWithBW.getMovesToThis({0, 2}, PieceColor::Black));
    EXPECT_EQ(expectedMovesAtTheTopWithEmptySpace, boardWithWB.getMovesToThis({0, 2}, PieceColor::White));
    EXPECT_EQ(expectedMovesAtTheTopWithOpponentsPiece, boardWithBW.getMovesToThis({0, 0}, PieceColor::Black));
    EXPECT_EQ(expectedMovesAtTheTopWithOpponentsPiece, boardWithWB.getMovesToThis({0, 0}, PieceColor::White));
    EXPECT_TRUE(boardWithBW.getMovesToThis({2, 0}, PieceColor::Black).empty());
    EXPECT_TRUE(boardWithWB.getMovesToThis({2, 0}, PieceColor::White).empty());
}

TEST(BoardTest, GetMovesToThisWorksOnKingMoves) {
    Board boardWithBW(
        Board::Orientation::BlackUpWhiteDown,
        {0xE, 0xA, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xA, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x6});
    Board boardWithWB(
        Board::Orientation::WhiteUpBlackDown,
        {0x6, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xA, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xA, 0xE});

    Moves expectedMovesAtTheBottomWithEmptySpace{{{7, 7}, {6, 6}}};
    Moves expectedMovesAtTheBottomWithOpponentsPiece{{{7, 7}, {7, 6}}};
    Moves expectedMovesAtTheTopWithEmptySpace{{{0, 0}, {1, 1}}};
    Moves expectedMovesAtTheTopWithOpponentsPiece{{{0, 0}, {0, 1}}};
    EXPECT_EQ(expectedMovesAtTheBottomWithEmptySpace, boardWithBW.getMovesToThis({6, 6}, PieceColor::White));
    EXPECT_EQ(expectedMovesAtTheBottomWithEmptySpace, boardWithWB.getMovesToThis({6, 6}, PieceColor::Black));
    EXPECT_EQ(expectedMovesAtTheBottomWithOpponentsPiece, boardWithBW.getMovesToThis({7, 6}, PieceColor::White));
    EXPECT_EQ(expectedMovesAtTheBottomWithOpponentsPiece, boardWithWB.getMovesToThis({7, 6}, PieceColor::Black));
    EXPECT_TRUE(boardWithBW.getMovesToThis({6, 7}, PieceColor::White).empty());
    EXPECT_TRUE(boardWithWB.getMovesToThis({6, 7}, PieceColor::Black).empty());
    EXPECT_EQ(expectedMovesAtTheTopWithEmptySpace, boardWithBW.getMovesToThis({1, 1}, PieceColor::Black));
    EXPECT_EQ(expectedMovesAtTheTopWithEmptySpace, boardWithWB.getMovesToThis({1, 1}, PieceColor::White));
    EXPECT_EQ(expectedMovesAtTheTopWithOpponentsPiece, boardWithBW.getMovesToThis({0, 1}, PieceColor::Black));
    EXPECT_EQ(expectedMovesAtTheTopWithOpponentsPiece, boardWithWB.getMovesToThis({0, 1}, PieceColor::White));
    EXPECT_TRUE(boardWithBW.getMovesToThis({1, 0}, PieceColor::Black).empty());
    EXPECT_TRUE(boardWithWB.getMovesToThis({1, 0}, PieceColor::White).empty());
}

TEST(BoardTest, GetMoveFromTwoLetterNumberNotationWorks) {
    Board boardWithBW(Board::Orientation::BlackUpWhiteDown);
    Board boardWithWB(Board::Orientation::WhiteUpBlackDown);

    Move move1(boardWithBW.getMoveFromTwoLetterNumberNotation("c2c4"));
    Move move2(boardWithWB.getMoveFromTwoLetterNumberNotation("c2c4"));

    EXPECT_EQ(Move({2, 6}, {2, 4}), move1);
    EXPECT_EQ(Move({5, 1}, {5, 3}), move2);
}

TEST(BoardTest, GetPieceAtWorks) {
    Board boardWithBW(Board::Orientation::BlackUpWhiteDown);
    Board boardWithWB(Board::Orientation::WhiteUpBlackDown);

    EXPECT_EQ(Piece(PieceColorAndType::BlackRook), boardWithBW.getPieceAt({0, 0}));
    EXPECT_EQ(Piece(PieceColorAndType::WhiteRook), boardWithBW.getPieceAt({7, 7}));
    EXPECT_EQ(Piece(PieceColorAndType::Empty), boardWithBW.getPieceAt({3, 3}));
    EXPECT_EQ(Piece(PieceColorAndType::Empty), boardWithBW.getPieceAt({4, 4}));
    EXPECT_EQ(Piece(PieceColorAndType::WhiteRook), boardWithWB.getPieceAt({0, 0}));
    EXPECT_EQ(Piece(PieceColorAndType::BlackRook), boardWithWB.getPieceAt({7, 7}));
    EXPECT_EQ(Piece(PieceColorAndType::Empty), boardWithWB.getPieceAt({3, 3}));
    EXPECT_EQ(Piece(PieceColorAndType::Empty), boardWithWB.getPieceAt({4, 4}));
}

TEST(BoardTest, GetCoordinateFromLetterNumberNotationWorks) {
    Board boardWithBW(Board::Orientation::BlackUpWhiteDown);
    Board boardWithWB(Board::Orientation::WhiteUpBlackDown);

    Coordinate coordinate1(boardWithBW.getCoordinateFromLetterNumberNotation("c2"));
    Coordinate coordinate2(boardWithWB.getCoordinateFromLetterNumberNotation("c2"));

    EXPECT_EQ((Coordinate{2, 6}), coordinate1);
    EXPECT_EQ((Coordinate{5, 1}), coordinate2);
}

TEST(BoardTest, GetLetterNumberNotationStringFromCoordinateWorks) {
    Board boardWithBW(Board::Orientation::BlackUpWhiteDown);
    Board boardWithWB(Board::Orientation::WhiteUpBlackDown);

    string letterNumber1(boardWithBW.getLetterNumberNotationStringFromCoordinate({4, 4}));
    string letterNumber2(boardWithWB.getLetterNumberNotationStringFromCoordinate({4, 4}));

    EXPECT_EQ("e4", letterNumber1);
    EXPECT_EQ("d5", letterNumber2);
}

TEST(BoardTest, GetReadableStringForMoveWorks) {
    Board boardWithBW(
        Board::Orientation::BlackUpWhiteDown,
        {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xC, 0xA, 0xB, 0xE, 0xD, 0xB, 0xA, 0xC, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1,
         0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x9, 0x9, 0x9,
         0x9, 0x9, 0x9, 0x9, 0x4, 0x2, 0x3, 0x6, 0x5, 0x3, 0x2, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0});

    EXPECT_EQ("King d7->c8", boardWithBW.getReadableStringForMove({{3, 1}, {2, 0}}));
}

TEST(BoardTest, GetNotationPartOfFenStringWorks) {
    Board boardWithBW(Board::Orientation::BlackUpWhiteDown);
    Board boardWithWB(Board::Orientation::WhiteUpBlackDown);
    Board board1(
        Board::Orientation::BlackUpWhiteDown,
        {0x0, 0x0, 0x0, 0xE, 0xD, 0x0, 0x0, 0x0, 0xC, 0xA, 0xB, 0x0, 0x0, 0xB, 0xA, 0xC, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0,
         0x1, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x9, 0x9, 0x0, 0x0, 0x9, 0x9, 0x0, 0x0, 0x0, 0x0, 0x9, 0x9,
         0x0, 0x0, 0x9, 0x9, 0x4, 0x2, 0x3, 0x0, 0x0, 0x3, 0x2, 0x4, 0x0, 0x0, 0x0, 0x6, 0x5, 0x0, 0x0, 0x0});
    Board board2(
        Board::Orientation::WhiteUpBlackDown,
        {0x4, 0x0, 0x3, 0x6, 0x5, 0x3, 0x0, 0x4, 0x1, 0x1, 0x1, 0x0, 0x1, 0x1, 0x1, 0x1, 0x0, 0x0, 0x2, 0x0, 0x0, 0x2,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xA, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x9, 0x0, 0x0, 0x0, 0x9, 0x9, 0x9, 0x9, 0x0, 0x9, 0x9, 0x9, 0xC, 0xA, 0xB, 0xE, 0xD, 0xB, 0x0, 0xC});

    EXPECT_EQ("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR", boardWithBW.getNotationPartOfFenString());
    EXPECT_EQ("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR", boardWithWB.getNotationPartOfFenString());
    EXPECT_EQ("3kq3/rnb2bnr/P1P1P1P1/1P1P1P1P/pp2pp2/2pp2pp/RNB2BNR/3KQ3", board1.getNotationPartOfFenString());
    EXPECT_EQ("r1bqkbnr/ppp1pppp/3p4/4n3/4P3/2N2N2/PPPP1PPP/R1BQKB1R", board2.getNotationPartOfFenString());
}

TEST(BoardTest, GetCastlingPartOfFenStringWorks) {
    Board boardWithBW(Board::Orientation::BlackUpWhiteDown);
    Board boardWithWB(Board::Orientation::WhiteUpBlackDown);
    Board board1(
        Board::Orientation::BlackUpWhiteDown,
        {0x0, 0xA, 0xB, 0xD, 0xE, 0xB, 0xA, 0xC, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x4, 0x2, 0x3, 0x5, 0x6, 0x3, 0x2, 0x0});
    Board board2(
        Board::Orientation::WhiteUpBlackDown,
        {0x4, 0x2, 0x3, 0x6, 0x5, 0x3, 0x2, 0x0, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x0, 0xA, 0xB, 0xE, 0xD, 0xB, 0xA, 0xC});

    EXPECT_EQ("KQkq", boardWithBW.getCastlingPartOfFenString());
    EXPECT_EQ("KQkq", boardWithWB.getCastlingPartOfFenString());
    EXPECT_EQ("Qk", board1.getCastlingPartOfFenString());
    EXPECT_EQ("Kq", board2.getCastlingPartOfFenString());
}

TEST(BoardTest, IsEmptyWorks) {
    Board boardWithBW(Board::Orientation::BlackUpWhiteDown);

    EXPECT_TRUE(boardWithBW.isEmptyAt({4, 4}));
    EXPECT_FALSE(boardWithBW.isEmptyAt({3, 6}));
}

TEST(BoardTest, IsACaptureMoveWorks) {
    Board boardWithBW(
        Board::Orientation::BlackUpWhiteDown,
        {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xB, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0});

    EXPECT_TRUE(boardWithBW.isACaptureMove({{2, 2}, {5, 5}}));
    EXPECT_TRUE(boardWithBW.isACaptureMove({{5, 5}, {2, 2}}));
    EXPECT_FALSE(boardWithBW.isACaptureMove({{2, 2}, {0, 0}}));
    EXPECT_FALSE(boardWithBW.isACaptureMove({{5, 5}, {7, 7}}));
}

TEST(BoardTest, IsAPromotionMoveWorks) {
    Board boardWithBW(
        Board::Orientation::BlackUpWhiteDown,
        {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0});

    EXPECT_TRUE(boardWithBW.isAPromotionMove({{1, 1}, {1, 0}}));
    EXPECT_FALSE(boardWithBW.isAPromotionMove({{2, 2}, {2, 1}}));
}

TEST(BoardTest, IsACastlingMoveWorks) {
    Board boardWithBW(
        Board::Orientation::BlackUpWhiteDown,
        {0x0, 0xA, 0xB, 0xD, 0xE, 0xB, 0xA, 0xC, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x4, 0x2, 0x3, 0x5, 0x6, 0x3, 0x2, 0x0});

    EXPECT_FALSE(boardWithBW.isACastlingMove({{4, 0}, {2, 0}}));
    EXPECT_TRUE(boardWithBW.isACastlingMove({{4, 0}, {6, 0}}));
    EXPECT_TRUE(boardWithBW.isACastlingMove({{4, 7}, {2, 7}}));
    EXPECT_FALSE(boardWithBW.isACastlingMove({{4, 7}, {6, 7}}));
}

TEST(BoardTest, IsAPossibleMoveWorksOnOneAndTwoStepPawnNonCapture) {
    Board boardWithBW(
        Board::Orientation::BlackUpWhiteDown,
        {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0xA, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0});
    Board boardWithWB(
        Board::Orientation::WhiteUpBlackDown,
        {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xA, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0});

    // one step (bottom)
    EXPECT_TRUE(boardWithBW.isAPossibleMove({{7, 6}, {7, 5}}));
    EXPECT_TRUE(boardWithWB.isAPossibleMove({{7, 6}, {7, 5}}));

    // two step (bottom)
    EXPECT_TRUE(boardWithBW.isAPossibleMove({{7, 6}, {7, 4}}));
    EXPECT_TRUE(boardWithWB.isAPossibleMove({{7, 6}, {7, 4}}));

    // three step (bottom)
    EXPECT_FALSE(boardWithBW.isAPossibleMove({{7, 6}, {7, 3}}));
    EXPECT_FALSE(boardWithWB.isAPossibleMove({{7, 6}, {7, 3}}));

    // one step with blocking (bottom)
    EXPECT_FALSE(boardWithBW.isAPossibleMove({{5, 6}, {5, 5}}));
    EXPECT_FALSE(boardWithWB.isAPossibleMove({{5, 6}, {5, 5}}));

    // two step with blocking (bottom)
    EXPECT_FALSE(boardWithBW.isAPossibleMove({{5, 6}, {5, 4}}));
    EXPECT_FALSE(boardWithWB.isAPossibleMove({{5, 6}, {5, 4}}));

    // one step (top)
    EXPECT_TRUE(boardWithBW.isAPossibleMove({{0, 1}, {0, 2}}));
    EXPECT_TRUE(boardWithWB.isAPossibleMove({{0, 1}, {0, 2}}));

    // two step (top)
    EXPECT_TRUE(boardWithBW.isAPossibleMove({{0, 1}, {0, 3}}));
    EXPECT_TRUE(boardWithWB.isAPossibleMove({{0, 1}, {0, 3}}));

    // three step (top)
    EXPECT_FALSE(boardWithBW.isAPossibleMove({{0, 1}, {0, 4}}));
    EXPECT_FALSE(boardWithWB.isAPossibleMove({{0, 1}, {0, 4}}));

    // one step with blocking (top)
    EXPECT_FALSE(boardWithBW.isAPossibleMove({{2, 1}, {2, 2}}));
    EXPECT_FALSE(boardWithWB.isAPossibleMove({{2, 1}, {2, 2}}));

    // two step with blocking (top)
    EXPECT_FALSE(boardWithBW.isAPossibleMove({{2, 1}, {2, 3}}));
    EXPECT_FALSE(boardWithWB.isAPossibleMove({{2, 1}, {2, 3}}));
}

TEST(BoardTest, IsAPossibleMoveWorksOnPawnCapture) {
    Board boardWithBW(
        Board::Orientation::BlackUpWhiteDown,
        {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x9, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0});
    Board boardWithWB(
        Board::Orientation::WhiteUpBlackDown,
        {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x9, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0});

    EXPECT_TRUE(boardWithBW.isAPossibleMove({{6, 6}, {5, 5}}));
    EXPECT_TRUE(boardWithWB.isAPossibleMove({{6, 6}, {5, 5}}));
    EXPECT_FALSE(boardWithBW.isAPossibleMove({{6, 6}, {7, 5}}));
    EXPECT_FALSE(boardWithWB.isAPossibleMove({{6, 6}, {7, 5}}));
    EXPECT_TRUE(boardWithBW.isAPossibleMove({{1, 1}, {2, 2}}));
    EXPECT_TRUE(boardWithWB.isAPossibleMove({{1, 1}, {2, 2}}));
    EXPECT_FALSE(boardWithBW.isAPossibleMove({{1, 1}, {0, 2}}));
    EXPECT_FALSE(boardWithWB.isAPossibleMove({{1, 1}, {0, 2}}));
}

TEST(BoardTest, IsAPossibleMoveWorksOnKnightMoves) {
    Board boardWithBW(
        Board::Orientation::BlackUpWhiteDown,
        {0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0xA, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0});
    Board boardWithWB(
        Board::Orientation::WhiteUpBlackDown,
        {0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xA, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0});

    EXPECT_TRUE(boardWithBW.isAPossibleMove({{6, 6}, {4, 5}}));
    EXPECT_TRUE(boardWithWB.isAPossibleMove({{6, 6}, {4, 5}}));
    EXPECT_TRUE(boardWithBW.isAPossibleMove({{6, 6}, {7, 4}}));
    EXPECT_TRUE(boardWithWB.isAPossibleMove({{6, 6}, {7, 4}}));
    EXPECT_FALSE(boardWithBW.isAPossibleMove({{6, 6}, {5, 7}}));
    EXPECT_FALSE(boardWithWB.isAPossibleMove({{6, 6}, {5, 7}}));
    EXPECT_TRUE(boardWithBW.isAPossibleMove({{1, 1}, {3, 2}}));
    EXPECT_TRUE(boardWithWB.isAPossibleMove({{1, 1}, {3, 2}}));
    EXPECT_TRUE(boardWithBW.isAPossibleMove({{1, 1}, {0, 3}}));
    EXPECT_TRUE(boardWithWB.isAPossibleMove({{1, 1}, {0, 3}}));
    EXPECT_FALSE(boardWithBW.isAPossibleMove({{1, 1}, {3, 0}}));
    EXPECT_FALSE(boardWithWB.isAPossibleMove({{1, 1}, {3, 0}}));
}

TEST(BoardTest, IsAPossibleMoveWorksOnBishopMoves) {
    Board boardWithBW(
        Board::Orientation::BlackUpWhiteDown,
        {0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xB, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0});
    Board boardWithWB(
        Board::Orientation::WhiteUpBlackDown,
        {0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0xB, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0});

    EXPECT_TRUE(boardWithBW.isAPossibleMove({{5, 5}, {7, 7}}));
    EXPECT_TRUE(boardWithWB.isAPossibleMove({{5, 5}, {7, 7}}));
    EXPECT_TRUE(boardWithBW.isAPossibleMove({{5, 5}, {3, 7}}));
    EXPECT_TRUE(boardWithWB.isAPossibleMove({{5, 5}, {3, 7}}));
    EXPECT_FALSE(boardWithBW.isAPossibleMove({{5, 5}, {7, 3}}));
    EXPECT_FALSE(boardWithWB.isAPossibleMove({{5, 5}, {7, 3}}));
    EXPECT_FALSE(boardWithBW.isAPossibleMove({{5, 5}, {1, 1}}));
    EXPECT_FALSE(boardWithWB.isAPossibleMove({{5, 5}, {1, 1}}));
    EXPECT_TRUE(boardWithBW.isAPossibleMove({{2, 2}, {0, 0}}));
    EXPECT_TRUE(boardWithWB.isAPossibleMove({{2, 2}, {0, 0}}));
    EXPECT_TRUE(boardWithBW.isAPossibleMove({{2, 2}, {4, 0}}));
    EXPECT_TRUE(boardWithWB.isAPossibleMove({{2, 2}, {4, 0}}));
    EXPECT_FALSE(boardWithBW.isAPossibleMove({{2, 2}, {0, 4}}));
    EXPECT_FALSE(boardWithWB.isAPossibleMove({{2, 2}, {0, 4}}));
    EXPECT_FALSE(boardWithBW.isAPossibleMove({{2, 2}, {6, 6}}));
    EXPECT_FALSE(boardWithWB.isAPossibleMove({{2, 2}, {6, 6}}));
}

TEST(BoardTest, IsAPossibleMoveWorksOnRookMoves) {
    Board boardWithBW(
        Board::Orientation::BlackUpWhiteDown,
        {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0xC, 0x0, 0x9, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1,
         0x0, 0x4, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0});
    Board boardWithWB(
        Board::Orientation::WhiteUpBlackDown,
        {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x4, 0x0, 0x1, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9,
         0x0, 0xC, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0});

    EXPECT_TRUE(boardWithBW.isAPossibleMove({{5, 5}, {5, 7}}));
    EXPECT_TRUE(boardWithWB.isAPossibleMove({{5, 5}, {5, 7}}));
    EXPECT_TRUE(boardWithBW.isAPossibleMove({{5, 5}, {7, 5}}));
    EXPECT_TRUE(boardWithWB.isAPossibleMove({{5, 5}, {7, 5}}));
    EXPECT_FALSE(boardWithBW.isAPossibleMove({{5, 5}, {3, 5}}));
    EXPECT_FALSE(boardWithWB.isAPossibleMove({{5, 5}, {3, 5}}));
    EXPECT_FALSE(boardWithBW.isAPossibleMove({{5, 5}, {2, 5}}));
    EXPECT_FALSE(boardWithWB.isAPossibleMove({{5, 5}, {2, 5}}));
    EXPECT_TRUE(boardWithBW.isAPossibleMove({{2, 2}, {2, 0}}));
    EXPECT_TRUE(boardWithWB.isAPossibleMove({{2, 2}, {2, 0}}));
    EXPECT_TRUE(boardWithBW.isAPossibleMove({{2, 2}, {0, 2}}));
    EXPECT_TRUE(boardWithWB.isAPossibleMove({{2, 2}, {0, 2}}));
    EXPECT_FALSE(boardWithBW.isAPossibleMove({{2, 2}, {4, 2}}));
    EXPECT_FALSE(boardWithWB.isAPossibleMove({{2, 2}, {4, 2}}));
    EXPECT_FALSE(boardWithBW.isAPossibleMove({{2, 2}, {5, 2}}));
    EXPECT_FALSE(boardWithWB.isAPossibleMove({{2, 2}, {5, 2}}));
}

TEST(BoardTest, IsAPossibleMoveWorksOnQueenMoves) {
    Board boardWithBW(
        Board::Orientation::BlackUpWhiteDown,
        {0x1, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xD, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x9});
    Board boardWithWB(
        Board::Orientation::WhiteUpBlackDown,
        {0x9, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0xD, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x1});

    EXPECT_TRUE(boardWithBW.isAPossibleMove({{5, 5}, {7, 5}}));
    EXPECT_TRUE(boardWithWB.isAPossibleMove({{5, 5}, {7, 5}}));
    EXPECT_TRUE(boardWithBW.isAPossibleMove({{5, 5}, {7, 7}}));
    EXPECT_TRUE(boardWithWB.isAPossibleMove({{5, 5}, {7, 7}}));
    EXPECT_FALSE(boardWithBW.isAPossibleMove({{5, 5}, {5, 7}}));
    EXPECT_FALSE(boardWithWB.isAPossibleMove({{5, 5}, {5, 7}}));
    EXPECT_FALSE(boardWithBW.isAPossibleMove({{5, 5}, {1, 1}}));
    EXPECT_FALSE(boardWithWB.isAPossibleMove({{5, 5}, {1, 1}}));
    EXPECT_TRUE(boardWithBW.isAPossibleMove({{2, 2}, {0, 2}}));
    EXPECT_TRUE(boardWithWB.isAPossibleMove({{2, 2}, {0, 2}}));
    EXPECT_TRUE(boardWithBW.isAPossibleMove({{2, 2}, {0, 0}}));
    EXPECT_TRUE(boardWithWB.isAPossibleMove({{2, 2}, {0, 0}}));
    EXPECT_FALSE(boardWithBW.isAPossibleMove({{2, 2}, {2, 0}}));
    EXPECT_FALSE(boardWithWB.isAPossibleMove({{2, 2}, {2, 0}}));
    EXPECT_FALSE(boardWithBW.isAPossibleMove({{2, 2}, {6, 6}}));
    EXPECT_FALSE(boardWithWB.isAPossibleMove({{2, 2}, {6, 6}}));
}

TEST(BoardTest, IsAPossibleMoveWorksOnKingOneStepMoves) {
    Board boardWithBW(
        Board::Orientation::BlackUpWhiteDown,
        {0xE, 0xA, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xA, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x6});
    Board boardWithWB(
        Board::Orientation::WhiteUpBlackDown,
        {0x6, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xA, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xA, 0xE});

    EXPECT_TRUE(boardWithBW.isAPossibleMove({{7, 7}, {6, 6}}));
    EXPECT_TRUE(boardWithWB.isAPossibleMove({{7, 7}, {6, 6}}));
    EXPECT_TRUE(boardWithBW.isAPossibleMove({{7, 7}, {7, 6}}));
    EXPECT_TRUE(boardWithWB.isAPossibleMove({{7, 7}, {7, 6}}));
    EXPECT_FALSE(boardWithBW.isAPossibleMove({{7, 7}, {6, 7}}));
    EXPECT_FALSE(boardWithWB.isAPossibleMove({{7, 7}, {6, 7}}));
    EXPECT_TRUE(boardWithBW.isAPossibleMove({{0, 0}, {1, 1}}));
    EXPECT_TRUE(boardWithWB.isAPossibleMove({{0, 0}, {1, 1}}));
    EXPECT_TRUE(boardWithBW.isAPossibleMove({{0, 0}, {0, 1}}));
    EXPECT_TRUE(boardWithWB.isAPossibleMove({{0, 0}, {0, 1}}));
    EXPECT_FALSE(boardWithBW.isAPossibleMove({{0, 0}, {1, 0}}));
    EXPECT_FALSE(boardWithWB.isAPossibleMove({{0, 0}, {1, 0}}));
}

TEST(BoardTest, IsAPossibleMoveWorksOnKingCastlingMoves) {
    Board boardWithBW(
        Board::Orientation::BlackUpWhiteDown,
        {0xC, 0x0, 0x0, 0x0, 0xE, 0x0, 0x9, 0xC, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x6, 0x0, 0x1, 0x4});
    Board boardWithWB(
        Board::Orientation::WhiteUpBlackDown,
        {0x4, 0x0, 0x0, 0x6, 0x0, 0x0, 0x1, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xC, 0x0, 0x0, 0xE, 0x0, 0x0, 0x9, 0xC});

    EXPECT_TRUE(boardWithBW.isAPossibleMove({{4, 0}, {2, 0}}));
    EXPECT_FALSE(boardWithBW.isAPossibleMove({{4, 0}, {6, 0}}));
    EXPECT_TRUE(boardWithBW.isAPossibleMove({{4, 7}, {2, 7}}));
    EXPECT_FALSE(boardWithBW.isAPossibleMove({{4, 7}, {6, 7}}));
    EXPECT_TRUE(boardWithWB.isAPossibleMove({{3, 0}, {1, 0}}));
    EXPECT_FALSE(boardWithWB.isAPossibleMove({{3, 0}, {5, 0}}));
    EXPECT_TRUE(boardWithWB.isAPossibleMove({{3, 7}, {1, 7}}));
    EXPECT_FALSE(boardWithWB.isAPossibleMove({{3, 7}, {5, 7}}));
}

TEST(BoardTest, CanBeCapturedWorks) {
    Board boardWithBW(
        Board::Orientation::BlackUpWhiteDown,
        {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0});

    EXPECT_TRUE(boardWithBW.canBeCaptured({3, 3}));
    EXPECT_FALSE(boardWithBW.canBeCaptured({3, 4}));
    EXPECT_FALSE(boardWithBW.canBeCaptured({4, 3}));
    EXPECT_TRUE(boardWithBW.canBeCaptured({4, 4}));
    EXPECT_FALSE(boardWithBW.canBeCaptured({0, 0}));
    EXPECT_FALSE(boardWithBW.canBeCaptured({7, 7}));
}

TEST(BoardTest, AreThereAnyMovesToThisWorks) {
    Board boardWithBW(
        Board::Orientation::BlackUpWhiteDown,
        {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0});

    EXPECT_TRUE(boardWithBW.areThereAnyMovesToThis({3, 3}, PieceColor::White));
    EXPECT_FALSE(boardWithBW.areThereAnyMovesToThis({3, 4}, PieceColor::White));
    EXPECT_FALSE(boardWithBW.areThereAnyMovesToThis({4, 3}, PieceColor::Black));
    EXPECT_TRUE(boardWithBW.areThereAnyMovesToThis({4, 4}, PieceColor::Black));
    EXPECT_FALSE(boardWithBW.areThereAnyMovesToThis({0, 0}, PieceColor::White));
    EXPECT_FALSE(boardWithBW.areThereAnyMovesToThis({7, 7}, PieceColor::Black));
}

TEST(BoardTest, HasOnlyOneMoveToThisWorks) {
    Board boardWithBW(
        Board::Orientation::BlackUpWhiteDown,
        {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xA, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0});

    EXPECT_TRUE(boardWithBW.hasOnlyOneMoveToThis({3, 3}, PieceColor::White));
    EXPECT_FALSE(boardWithBW.hasOnlyOneMoveToThis({3, 4}, PieceColor::White));
    EXPECT_FALSE(boardWithBW.hasOnlyOneMoveToThis({4, 3}, PieceColor::Black));
    EXPECT_FALSE(boardWithBW.hasOnlyOneMoveToThis({4, 4}, PieceColor::Black));
    EXPECT_FALSE(boardWithBW.hasOnlyOneMoveToThis({0, 0}, PieceColor::White));
    EXPECT_FALSE(boardWithBW.hasOnlyOneMoveToThis({7, 7}, PieceColor::Black));
}

TEST(BoardTest, SetOrientationWorks) {
    Board boardWithBW;
    EXPECT_EQ(Board::Orientation::Unknown, boardWithBW.getOrientation());

    boardWithBW.setOrientation(Board::Orientation::WhiteUpBlackDown);

    EXPECT_EQ(Board::Orientation::WhiteUpBlackDown, boardWithBW.getOrientation());
}

TEST(BoardTest, SetPieceAtWorks) {
    Board boardWithBW;

    boardWithBW.setPieceAt({7, 7}, Piece(PieceColorAndType::WhitePawn));

    Board::PieceMatrix emptyMatrixWithOneWhitePawn(
        8U, 8U,
        {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1});
    EXPECT_EQ(emptyMatrixWithOneWhitePawn, boardWithBW.getPieceMatrix());
}

TEST(BoardTest, MoveWorksForWhitePawnMovingTwoSpaces) {
    Board boardWithBW(Board::Orientation::BlackUpWhiteDown);

    boardWithBW.move({{2, 6}, {2, 4}});

    Board::PieceMatrix expectedMatrix(
        8U, 8U,
        {0xC, 0xA, 0xB, 0xD, 0xE, 0xB, 0xA, 0xC, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x0, 0x1, 0x1, 0x1, 0x1, 0x1, 0x4, 0x2, 0x3, 0x5, 0x6, 0x3, 0x2, 0x4});
    EXPECT_EQ(expectedMatrix, boardWithBW.getPieceMatrix());
}

TEST(BoardTest, MoveWorksForWhiteRookCapturingABlackPawn) {
    Board board(
        Board::Orientation::BlackUpWhiteDown,
        {0xC, 0xA, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0xB, 0x0, 0x0, 0x0, 0x9, 0x9, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xC,
         0x2, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x4, 0x0, 0x0, 0x0, 0x0, 0x4, 0x6, 0x0});

    board.move({{5, 7}, {5, 1}});

    Board::PieceMatrix expectedMatrix(
        8U, 8U,
        {0xC, 0xA, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0xB, 0x0, 0x0, 0x0, 0x4, 0x9, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xC,
         0x2, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x0});
    EXPECT_EQ(expectedMatrix, board.getPieceMatrix());
}

TEST(BoardTest, MoveWorksForWhitePawnCapturingABlackBishop) {
    Board board(
        Board::Orientation::BlackUpWhiteDown,
        {0xC, 0x0, 0x0, 0x0, 0x0, 0x0, 0xE, 0x0, 0x9, 0x9, 0x0, 0xB, 0x0, 0x9, 0x9, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x9, 0x0, 0x1, 0x0, 0x0, 0x0, 0x5, 0x0, 0x0, 0xD, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0,
         0xB, 0x0, 0x0, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x1, 0x1, 0x0, 0x4, 0x0, 0x0, 0x0, 0x2, 0x0, 0x6, 0x0});

    board.move({{5, 6}, {4, 5}});

    Board::PieceMatrix expectedMatrix(
        8U, 8U,
        {0xC, 0x0, 0x0, 0x0, 0x0, 0x0, 0xE, 0x0, 0x9, 0x9, 0x0, 0xB, 0x0, 0x9, 0x9, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x9, 0x0, 0x1, 0x0, 0x0, 0x0, 0x5, 0x0, 0x0, 0xD, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0,
         0x1, 0x0, 0x0, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x4, 0x0, 0x0, 0x0, 0x2, 0x0, 0x6, 0x0});
    EXPECT_EQ(expectedMatrix, board.getPieceMatrix());
}

TEST(BoardTest, MoveWorksWithCastling) {
    Board board(
        Board::Orientation::BlackUpWhiteDown,
        {0xC, 0xA, 0xB, 0xD, 0xE, 0xB, 0xA, 0xC, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x4, 0x0, 0x0, 0x0, 0x6, 0x3, 0x2, 0x4});

    board.move({{4, 7}, {2, 7}});

    Board::PieceMatrix expectedMatrix(
        8U, 8U,
        {0xC, 0xA, 0xB, 0xD, 0xE, 0xB, 0xA, 0xC, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
         0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x0, 0x6, 0x4, 0x0, 0x3, 0x2, 0x4});
    EXPECT_EQ(expectedMatrix, board.getPieceMatrix());
}

}  // namespace chess

}  // namespace alba
